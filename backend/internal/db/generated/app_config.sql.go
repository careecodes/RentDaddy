// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: app_config.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteConfig = `-- name: DeleteConfig :exec
DELETE FROM app_config
WHERE key = $1
`

func (q *Queries) DeleteConfig(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteConfig, key)
	return err
}

const getAllConfig = `-- name: GetAllConfig :many
SELECT id, key, value, user_id, description, updated_at, created_at FROM app_config
ORDER BY key
`

func (q *Queries) GetAllConfig(ctx context.Context) ([]AppConfig, error) {
	rows, err := q.db.Query(ctx, getAllConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppConfig
	for rows.Next() {
		var i AppConfig
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.UserID,
			&i.Description,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigByKey = `-- name: GetConfigByKey :one
SELECT id, key, value, user_id, description, updated_at, created_at FROM app_config
WHERE key = $1
LIMIT 1
`

func (q *Queries) GetConfigByKey(ctx context.Context, key string) (AppConfig, error) {
	row := q.db.QueryRow(ctx, getConfigByKey, key)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.UserID,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const upsertConfig = `-- name: UpsertConfig :one
INSERT INTO app_config (key, value, description, user_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT (key) 
DO UPDATE SET 
    value = $2,
    description = $3,
    user_id = $4,
    updated_at = now()
RETURNING id, key, value, user_id, description, updated_at, created_at
`

type UpsertConfigParams struct {
	Key         string      `json:"key"`
	Value       string      `json:"value"`
	Description pgtype.Text `json:"description"`
	UserID      pgtype.Int8 `json:"user_id"`
}

func (q *Queries) UpsertConfig(ctx context.Context, arg UpsertConfigParams) (AppConfig, error) {
	row := q.db.QueryRow(ctx, upsertConfig,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.UserID,
	)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.UserID,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
